{{- $replicaCount := int .Values.rabbitmq.replicaCount }}
{{- $podName := (printf "%s-rabbitmqcluster-server" .Chart.Name) }}
{{- $serviceName := (printf "%s-rabbitmqcluster-nodes" .Chart.Name) }}
{{- $namespaceName := (include "namespace.name" .) }}
{{- $rabbitMQDefaultUser := .Values.rabbitmq.auth.rabbitmqDefaultUser }}
{{- $rabbitMQList := list }}
{{- range $e, $i := until $replicaCount }}
{{- $rabbitMQList = append $rabbitMQList (printf "amqp://%s:$(RABBITMQ_PASSWORD)@%s-%d.%s.%s.svc.cluster.local:5672" $rabbitMQDefaultUser $podName $i $serviceName $namespaceName) }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-core" .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ printf "%s-core" .Chart.Name }}
    container: core
    {{- if .Values.core.labels }}
    {{- toYaml .Values.core.labels | nindent 4 }}
    {{- end }}
    {{- include "resource.labels.commonLabels" .  | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  namespace: {{ include "namespace.name" . }}
  {{- if or .Values.core.annotations .Values.commonAnnotations }}
  annotations: 
    {{- if .Values.core.annotations }}
    {{- toYaml .Values.core.annotations | nindent 4 }}
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.core.replicaCount.core }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ printf "%s-core" .Chart.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ printf "%s-core" .Chart.Name }}
        container: core
        {{- if .Values.core.labels }}
        {{- toYaml .Values.core.labels | nindent 8 }}
        {{- end }}
        {{- include "resource.labels.commonLabels" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
      namespace: {{ include "namespace.name" . }}
      {{- if or .Values.core.annotations .Values.commonAnnotations }}
      annotations: 
        {{- if .Values.core.annotations }}
        {{- toYaml .Values.core.annotations | nindent 8 }}
        {{- end }}
        {{- if .Values.commonAnnotations }}
        {{- include "tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      initContainers:
        {{- if .Values.core.initContainers.volumePermissionContainer.create }}
        - name: change-dir-permissions
          command:
            - sh
          args:
            - -ec
            - |
              mkdir -p /opt/netskope/plugins/custom_plugins
              chown -R 1001:1001 /opt/netskope/plugins/
              chown -R 1001:1001 /opt/netskope/repos/
          image: {{ .Values.core.initContainers.image }}
          volumeMounts:
            - mountPath: /opt/netskope/plugins/
              name: {{ printf "%s-core-custom-plugins-config-volume" .Chart.Name }}
            - mountPath: /opt/netskope/repos/
              name: {{ printf "%s-core-custom-repo-config-volume" .Chart.Name }}
          securityContext:
            privileged: {{ .Values.core.securityContext.privileged }}
            allowPrivilegeEscalation: {{ .Values.core.securityContext.allowPrivilegeEscalation }}
            capabilities:
              drop:
                - ALL
        {{- end }}
        - name: init-core
          image: {{ .Values.core.initContainers.image }}
          imagePullPolicy: Always
          env:
            - name: MONGODB_SERVICE
              value: {{ printf "%s-mongodbcluster-svc" .Chart.Name }}
            - name: RABBITMQ_SERVICE
              value: {{ printf "%s-rabbitmqcluster-nodes" .Chart.Name }}
          command:
            - sh
            - "-c"
            - >-
              until wget -q -T 5 -O - -S http://$(MONGODB_SERVICE):27017/; 
              do 
                echo waiting for mongodb-primary;sleep 2; 
              done; 
              until wget -q -T 5 -O - -S http://$(RABBITMQ_SERVICE):15672/; 
              do 
                echo waiting for rabbitmq-stats;sleep 2; 
              done;
          securityContext:
            privileged: {{ .Values.core.securityContext.privileged }}
            allowPrivilegeEscalation: {{ .Values.core.securityContext.allowPrivilegeEscalation }}
            capabilities:
              drop:
                - ALL
        - name: init-plugins-repo
          image: {{ .Values.core.image }}
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - >-
              cp -r /opt/netskope/plugins/* /data-plugins;
              cp -r /opt/netskope/repos/* /data-repos;
          volumeMounts:
            - mountPath: /data-plugins
              name: {{ printf "%s-core-custom-plugins-config-volume" .Chart.Name }}
            - mountPath: /data-repos
              name: {{ printf "%s-core-custom-repo-config-volume" .Chart.Name }}
          securityContext:
            privileged: {{ .Values.core.securityContext.privileged }}
            allowPrivilegeEscalation: {{ .Values.core.securityContext.allowPrivilegeEscalation }}
            capabilities:
              drop:
                - ALL
      containers:
        - env:
            - name: UI_SERVICE_NAME
              value: {{ printf "%s-ui-service" .Chart.Name }}
            - name: ANALYTICS_BASE_URL
              value: https://reporting.netskope.tech
            - name: ANALYTICS_TOKEN
              valueFrom:
                secretKeyRef:
                  key: analytics-token
                  name: {{ .Values.core.secrets.core.name }}
            - name: UI_LATEST_VERSION_TAG
              value: {{ printf "%s:ui4-latest" (split ":" .Values.ui.image)._0 }}
            - name: CORE_LATEST_VERSION_TAG
              value: {{ printf "%s:core4-latest" (split ":" .Values.core.image)._0 }}
            - name: RABBITMQ_AVAILABLE_STORAGE
              value: "{{ .Values.core.rabbitmqAvailableStorage }}"
            - name: MANAGED_CE
            {{- if eq (int .Values.core.replicaCount.worker) (int 0) }}
              value: "false"
            {{- else }}
              value: "true"
            {{- end }}
            - name: WORKER_CONCURRENCY
              value: "{{ .Values.core.workerConcurrency }}" 
            - name: ENABLE_CELERY_BEAT
              value: "true"
            {{- if .Values.core.proxy.enable }}
            - name: HTTP_PROXY
              value: {{ required "Proxy URL cannot be empty" .Values.core.proxy.url }}
            - name: HTTPS_PROXY
              value: {{ required "Proxy URL cannot be empty" .Values.core.proxy.url }}
            {{- end }} 
            - name: JWT_ALGORITHM
              value: HS256
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: jwt-secret
                  name: {{ .Values.core.secrets.core.name }}
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: rabbitmq-default-password
                  name: {{ .Values.rabbitmq.secrets.name }}
            - name: MAX_MAINTENANCE_WINDOW_MINUTES
              value: "15"
            - name: MAX_WAIT_ON_LOCK_IN_MINUTES
              value: "240"
            - name: MONGO_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  key: connectionString.standard
                  name: {{ printf "%s-mongo-cteadmin-connection-string" .Chart.Name }}
                  optional: false
            - name: PULL_THREADS
              value: "4"
            - name: RABBITMQ_CONNECTION_STRING
              value: {{ join ";" $rabbitMQList }}
            - name: POPEN_TIMEOUT
              value: "1800"
            - name: REQUESTS_TIMEOUT
              value: "300"
          image: {{ .Values.core.image }}
          imagePullPolicy: Always
          name: {{ printf "%s-core" .Chart.Name }}
          ports:
            - containerPort: 8000
              name: "core"
              protocol: TCP
          startupProbe:
            tcpSocket:
              port: 8000
            failureThreshold: 20
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
          livenessProbe:
            tcpSocket:
              port: 8000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 20
          readinessProbe:
            tcpSocket:
              port: 8000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 20
          resources: {{- toYaml .Values.core.resources.core | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            privileged: {{ .Values.core.securityContext.privileged }}
            allowPrivilegeEscalation: {{ .Values.core.securityContext.allowPrivilegeEscalation }}
            capabilities:
              drop:
                - ALL
          volumeMounts:
            {{- if .Values.core.caCertificate }}
            - name: {{ printf "%s-ca-cert-volume" .Chart.Name }}
              mountPath: /usr/local/share/ca-certificates
              readOnly: true
            {{- end }}
            - mountPath: /opt/netskope/plugins/
              name: {{ printf "%s-core-custom-plugins-config-volume" .Chart.Name }}
            - mountPath: /opt/netskope/repos/
              name: {{ printf "%s-core-custom-repo-config-volume" .Chart.Name }}  
            - mountPath: /service-account
              name: serviceaccount-token-volume
              readOnly: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: container
                      operator: In
                      values:
                        - core
                topologyKey: topology.kubernetes.io/zone
      restartPolicy: Always
      serviceAccount: {{ include "serviceAccountName.name" . }}
      volumes:
        - name: {{ printf "%s-core-custom-plugins-config-volume" .Chart.Name }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-core-custom-plugins-config-volume-pvc" .Chart.Name }}
        - name: {{ printf "%s-core-custom-repo-config-volume" .Chart.Name }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-core-custom-repo-config-volume-pvc" .Chart.Name }}
        {{- if .Values.core.caCertificate }}
        - name: {{ printf "%s-ca-cert-volume" .Chart.Name }}
          secret:
            secretName: {{ .Values.core.secrets.caCertificate.name }}
        {{- end }}
        - name: serviceaccount-token-volume
          projected:
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3600
                  path: serviceaccount-token-volume
