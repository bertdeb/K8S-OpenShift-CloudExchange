## @param commonLabels Add labels to all the deployed resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}
## @param commonAnnotations Common annotations to add to all resources. Evaluated as a template
##
commonAnnotations: {}
## @param namespace which all resources are running in
##
namespace: ""
## ServiceAccount
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for all pods.
  ##
  create: true
  ## @param serviceAccount.name Name of the created serviceAccount
  ## If not set and create is true, a name is generated using the .Chart.Name-serviceaccount template
  ##
  name: ""
  ## @param serviceAccount.annotations Additional Service Account annotations
  ##
  annotations: {}
  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
  ##
  automountServiceAccountToken: false
## Private image registry
##
privateImageRegistry:
  ## @param.privateImageRegistry.imagePullSecrets if your image registry is private, in that case you have to pass imagePullSecrets
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## imagePullSecrets:
  ##   - myImagePullSecretName
  imagePullSecrets: []
## @param updateStrategy.type Strategy to use to replace existing pods.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate
## MonogDB params
##
mongodb:
  ## @param mongodb.labels Additional labels to be added to the MongoDB statefulset.
  ##
  labels: {}
  ## @param mongodb.annotations Additional annotations to be added to the MongoDB statefulset.
  ##
  annotations: {}
  ## mongodb Secrets
  ##
  secrets:
    root:
      ## @param mongodb.secrets.root.create Enable to create MongoDB root secret.
      ##
      create: true
      ## @param mongodb.secrets.root.name Name of the MongoDB Root secret.
      ##
      name: netskope-ce-mongodb-root-secret
    cte:
      ## @param mongodb.secrets.cire.create Enable to create MongoDB cte secret.
      ##
      create: true
      ## @param mongodb.secrets.cte.name Name of the MongoDB cte secret.
      ##
      name: netskope-ce-mongodb-cte-secret
  ## @param mongodb.image docker image of mongodb statefulset
  ##
  image: index.docker.io/mongo:5.0.16
  ## Init Container
  ##
  initContainers:
    ## @param mongodb.initContainers.image docker image of init containers  
    ##  
    image: busybox:latest
    ## Volume mount permission container.
    ##
    volumePermissionContainer:
      ## @param mongodb.initContainer.volumePermissionContainer.create creates init containers will use for change the mount volume permission and ownership
      ##
      create: true
  ## @param mongodb.resources resources request and limit for mongodb
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      memory: 1Gi
      cpu: 2000m
    requests:
      memory: 500Mi
      cpu: 1000m
  ## @param mongodb.replicaCount no of replica of mongodb
  ##
  replicaCount: 3
  ## @param mongodb.replicaSetName Name of replica set  
  ##  
  replicaSetName: rs1
  ## Security Context for mongodb
  ##
  securityContext:
    ## @param mongodb.securityContext.privileged Privileged containers can allow almost completely unrestricted host access
    ##
    privileged: false
    ## @param mongodb.securityContext.allowPrivilegeEscalation Enable privilege escalation
    ## it should be true if privileged is set to true.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    allowPrivilegeEscalation: false
  ## Persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param mongodb.persistence.size PVC Storage Request for MongoDB data volume
    ##
    size: 3Gi
    ## @param mongodb.persistence.storageClassName PVC Storage Class for MongoDB data volume
    ##
    storageClassName: manual
    ## @param mongodb.persistence.annotations PVC annotations
    ##
    annotations: {}
  ## MongoDB Secrets
  ##
  auth:
    ## @param mongodb.auth.rootUser MongoDB root username
    ##
    rootUser: "root"
    ## @param mongodb.auth.rootPassword MongoDB root password
    ##
    rootPassword: ""
    ## @param mongodb.auth.cteAdminUser MongoDB root username
    ##
    cteAdminUser: "cteadmin"
    ## @param mongodb.auth.cteAdminPassword MongoDB root password
    ##
    cteAdminPassword: ""
  ## Disable Telemetry  
  ## It will disable MongoDB's default telemetry  
  ## ref: https://www.mongodb.com/docs/mongodb-shell/telemetry/ 
  ##  
  disableTelemetry: true
## RabbitMQ Params (For Stats and Disc both)
##
rabbitmq:
  ## @param rabbitmq.labels Additional labels to be added to the RabbitMQ statefulset.
  ##
  labels: {}
  ## @param rabbitmq.annotations Additional annotations to be added to the RabbitMQ statefulset.
  ##
  annotations: {}
  ## rabbitmq Secrets
  ##
  secrets:
    ## @param rabbitmq.secrets.create Enable to create RabbitMQ secret.
    ##
    create: true
    ## @param rabbitmq.secrets.name Name of the RabbitMQ secret.
    ##
    name: netskope-ce-rabbitmq-secret
  ## Init Container
  ##
  initContainers:
    ## @param rabbitmq.initContainers.image docker image of init containers
    ##
    image: busybox:latest
    ## Volume mount permission container.
    ##
    volumePermissionContainer:
      ## @param rabbitmq.initContainer.volumePermissionContainer.create creates init containers will use for change the mount volume permission and ownership
      ##
      create: true
  ## @param rabbitmq.image docker image of rabbitmq statefulset
  ##
  image: index.docker.io/rabbitmq:3.11.11-management
  ## @param rabbitmq.replicaCount no of replica of rabbitmq
  ##
  replicaCount: 3
  ## @param rabbitmq.resources resources request and limit for rabbitmq
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      memory: 3Gi
      cpu: 1000m
    requests:
      memory: 1500Mi
      cpu: 500m
  ## Security Context for rabbitmq
  ##
  securityContext:
    ## @param rabbitmq.securityContext.privileged Privileged containers can allow almost completely unrestricted host access
    ##
    privileged: false
    ## @param rabbitmq.securityContext.allowPrivilegeEscalation Enable privilege escalation
    ## it should be true if privileged is set to true.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    allowPrivilegeEscalation: false
  ## Persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param rabbitmq.persistence.size PVC Storage Request for RabbitMQ data volume
    ##
    size: 3Gi
    ## @param rabbitmq.persistence.storageClassName PVC Storage Class for RabbitMQ data volume
    ##
    storageClassName: manual
    ## @param rabbitmq.persistence.annotations PVC annotations
    ##
    annotations: {}
  ## RabbitMQ Secrets
  ##
  auth:
    ## @param rabbitmq.auth.rabbitmqDefaultUser RabbitMQ Default User
    ##
    rabbitmqDefaultUser: "user"
    ## @param rabbitmq.auth.rabbitmqDefaultPassword RabbitMQ password
    ##
    rabbitmqDefaultPassword: ""
## Core Params
##
core:
  ## @param core.labels Additional labels to be added to the Core deployment.
  ##
  labels: {}
  ## @param core.annotations Additional annotations to be added to the Core deployment.
  ##
  annotations: {}
  ## core Secrets
  ##
  secrets:
    core:
      ## @param core.secrets.core.create Enable to create Core secret.
      ##
      create: true
      ## @param core.secrets.core.name Name of the Core secret.
      ##
      name: netskope-ce-core-secret
    caCertificate:
      ## @param core.secrets.caCertificate.create Enable to create CA Certificate secret.
      ##
      create: true
      ## @param core.secrets.caCertificate.name Name of the CA Certificate secret.
      ##
      name: netskope-ce-ca-certificate-secret
  ## @param core.workerConcurrency Set concurrency horizontal scaling
  ##
  workerConcurrency: 3
  ## @param core.rabbitmqAvailableStorage Rabbitmq available storage.
  ##
  rabbitmqAvailableStorage: "42949672960"
  ## Init Container
  ##
  initContainers:
    ## @param core.initContainers.image docker image of init containers 
    ##  
    image: busybox:latest
    ## Volume mount permission container.
    ##
    volumePermissionContainer:
      ## @param core.initContainer.volumePermissionContainer.create creates init containers will use for change the mount volume permission and ownership
      ##
      create: true
  ## Role Based Access only for core
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## @param rbac.create Whether to create & use RBAC resources or not
    ## binding ServiceAccount to a role
    ## that allows pods querying the K8s API
    ##
    create: true
    ## @param core.rbac.rules Custom rules to create following the role specification
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##       - watch
    ##       - update
    ##
    rules: []
  ## @param core.image docker image of core deployment
  ##
  image: netskopetechnicalalliances/cloudexchange:core4-latest
  ## @Replica Count for Worker
  ##
  replicaCount:
    ## @param core.replicaCount.core Number of replica count for core
    ##
    core: 1
    ## @param core.replicaCount.worker Number of replica count for worker
    ##
    worker: 2
  ## HTTP Proxy
  ##
  proxy:
    ## @param core.proxy.enable to enable proxy in core
    ##
    enable: false
    ## @param core.proxy.url Proxy URL
    ##
    url: ""
  ## @param core.resources resources request and limit for core
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    ## @param core.resources.core resources request and limit for core
    ## 
    core:
      limits:
        memory: 2Gi
        cpu: 1000m
      requests:
        memory: 1Gi
        cpu: 500m
    ## @param core.resources.worker resources request and limit for worker
    ## 
    worker:
      limits:
        memory: 3500Mi
        cpu: 2000m
      requests:
        memory: 1500Mi
        cpu: 1000m
  ## Security Context for core
  ##
  securityContext:
    ## @param core.securityContext.privileged Privileged containers can allow almost completely unrestricted host access
    ##
    privileged: false
    ## @param core.securityContext.allowPrivilegeEscalation Enable privilege escalation
    ## it should be true if privileged is set to true.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    allowPrivilegeEscalation: false
  ## Persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param core.persistence.size PVC Storage Request for core data volume
    ##
    size: 3Gi
    ## @param core.persistence.storageClassName PVC Storage Class for core data volume
    ##
    storageClassName: manual
    ## @param core.persistence.annotations PVC annotations
    ##
    annotations: {}
  ## CA Certifates Enable the private CA certificate
  ##
  caCertificate: false
  ## Core Secrets
  ##
  auth:
    ## @param core.auth.analyticsToken Analytics Token
    ##
    analyticsToken: ""
    ## @param core.auth.jwtToken JWT Token
    ##
    jwtToken: ""
## UI Params
##
ui:
  ## @param ui.labels Additional labels to be added to the UI deployment.
  ##
  labels: {}
  ## @param ui.annotations Additional annotations to be added to the UI deployment.
  ##
  annotations: {}
  ## ui Secrets
  ##
  secrets:
    ## @param ui.secrets.create Enable to create UI secret.
    ##
    create: true
    ## @param ui.secretsname Name of the UI secret.
    ##
    name: netskope-ce-ui-secret
  ## Init Container 
  ##  
  initContainers:
    ## @param ui.initContainers.image docker image of init containers 
    ##  
    image: busybox:latest
  ## Role Based Access only for mongodb
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## @param ui.rbac.create Whether to create & use RBAC resources or not
    ## binding ServiceAccount to a role
    ## that allows pods querying the K8s API
    ##
    create: true
    ## @param rbac.rules Custom rules to create following the role specification
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##       - watch
    ##       - update
    ##
    rules: []
  ## @param ui.image docker image of UI deployment
  ##
  image: netskopetechnicalalliances/cloudexchange:ui4-latest
  ## @param ui.replicaCount no of replica of ui
  ##
  replicaCount: 2
  ## @param ui.ssl to enable SSL certificates
  ##
  ssl: false
  ## @param ui.resources resources request and limit for ui
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    limits:
      memory: 250Mi
      cpu: 750m
    requests:
      memory: 125Mi
      cpu: 325m
  ## Security Context for ui
  ##
  securityContext:
    ## @param ui.securityContext.privileged Privileged containers can allow almost completely unrestricted host access
    ##
    privileged: false
    ## @param ui.securityContext.allowPrivilegeEscalation Enable privilege escalation
    ## it should be true if privileged is set to true.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    ##
    allowPrivilegeEscalation: false

